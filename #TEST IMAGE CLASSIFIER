'''
This program sends images in a zip file to the Watson Visual Recognition service for classification
and automatically writes the results to an Excel spreadsheet. When it is run, the images are
sent to the image classifier model that you specify with your Version date and API key, and the
model sends a JSON result. That result is parsed and written to a spreadsheet and the Precision,
Recall, and F1 score are automatically calculated, along with a Confusion Matrix for you to analyze.
'''

##################
# classify images
#################

# maximum image size: 10 MB
# maximum image count: 20
# for zip files: max 100 MB

import json, xlwt, os
from watson_developer_cloud import VisualRecognitionV3
from xlwt import Workbook
from xlwt import *
from datetime import date

###############################################
# invoke model with version number and API key
##############################################
visual_recognition = VisualRecognitionV3(
    'INSERT YOUR VERSION DATE HERE',
    iam_apikey='INSERT YOUR API KEY HERE')


# counter used when writing values to spreadsheet
excel_counter = 0


#################################################################################################
#################################################################################################
# specify parameters for iteration number, Testing images, desired threshold, and results export
#################################################################################################
#################################################################################################
iteration = 4
test_folder = r'C:\Users\pwalsh\Desktop\Classifier Testing\Testing'
threshold = 0.80
notebook_results = r'C:\Users\pwalsh\Desktop\Classifier Testing\Notebook Results 4.xls'





######################################################################
# create excel spreadsheet and add worksheets 'Results' and 'Analysis'
######################################################################
wb = Workbook()
results = wb.add_sheet('Results')

# write column headers for 'Results' sheet
results.write(0, 0, 'Date') 
results.write(0, 1, 'Model Name') 
results.write(0, 2, 'Iteration') 
results.write(0, 3, 'File Name') 
results.write(0, 4, 'Type') 
results.write(0, 5, 'Biofilm') 
results.write(0, 6, 'Symplast') 
results.write(0, 7, 'Prediction')
results.write(0, 9, 'Threshold')
results.write(1, 9, threshold)
results.write(0, 11, 'BB')
results.write(0, 12, 'SB')
results.write(0, 13, 'UB')
results.write(0, 15, 'BS')
results.write(0, 16, 'SS')
results.write(0, 17, 'US')
results.write(0, 19, 'BN')
results.write(0, 20, 'SN')
results.write(0, 21, 'UN')


#################################################
# results that will be written to Analysis sheet
#################################################
biofilm_correct = 0
biofilm_wrong = 0
biofilm_unclass = 0
symplast_correct = 0
symplast_wrong = 0
symplast_unclass = 0
negative_correct = 0
negative_bio = 0
negative_sym = 0

############################################################
# grab zip folder of test images and initiate tagging event
############################################################
for f in os.listdir(test_folder):
    f = os.path.join(test_folder, f)
    
    with open(f, 'rb') as images_file:
        classes = visual_recognition.classify(images_file,threshold='0.0',owners=["me"]).get_result()
        #print(json.dumps(classes, indent=2))
        '''
        # calculate number of images classified
        number_images = int(json.dumps(classes["images_processed"]))
        print('Image number: '+number_images)
        print(json.dumps(classes))
        print('\n')
        '''
    '''
    ############################################
    # start loop to parse training data results
    ############################################
    while counter <= number_images:
            print('Image {}'.format(counter+1))
            print('\n')
    '''
    
    ########################################
    # these values will be written to Excel
    #######################################
    model_name = json.dumps(classes["images"][0]["classifiers"][0]["name"])
    file_name = json.dumps(classes["images"][0]["image"])
    #biofilm_class = json.dumps(classes["images"][0]["classifiers"][0]["classes"][0]["class"])
    biofilm_class = 'biofilm'
    biofilm_score = float(json.dumps(classes["images"][0]["classifiers"][0]["classes"][0]["score"]))
    #symplast_class = json.dumps(classes["images"][0]["classifiers"][0]["classes"][1]["class"])
    symplast_class = 'symplast'
    symplast_score = float(json.dumps(classes["images"][0]["classifiers"][0]["classes"][1]["score"]))
    test_date = str(date.today())
    print('Model: '+model_name)
    print('Image: '+file_name)
    print(biofilm_class+': ',biofilm_score)
    print(symplast_class+': ',symplast_score)
        
        
        
        
    # determine if file is biofilm or symplast
    image_type = ''
    if 'BIO' in file_name:
        print('Type: Biofilm')
        image_type = 'biofilm'
    elif 'SYM' in file_name:
        print('Type: Symplast')
        image_type = 'symplast'
    elif 'NEG' in file_name:
        print('Type: Negative')
        image_type = 'negative'
        
        
    # determine if classified correctly, add to variables for Analysis sheet
    if image_type == biofilm_class and biofilm_score >= threshold:
        print('Classified correct')
        biofilm_correct += 1
    elif image_type == biofilm_class and symplast_score >= threshold:
        print('Classified wrong')
        biofilm_wrong += 1
    elif image_type == biofilm_class and symplast_score < threshold and biofilm_score < threshold:
        print('Unclassified')
        biofilm_unclass += 1
    elif image_type == symplast_class and symplast_score >= threshold:
        print('Classified correct')
        symplast_correct += 1
    elif image_type == symplast_class and biofilm_score >= threshold:
        print('Classified wrong')
        symplast_wrong += 1
    elif image_type == symplast_class and symplast_score < threshold and biofilm_score < threshold:
        print('Unclassified')
        symplast_unclass += 1
    elif image_type == 'negative' and symplast_score < threshold and biofilm_score < threshold:
        print('Classified correct')
        negative_correct += 1
    elif image_type == 'negative' and biofilm_score >= threshold:
        print('Classified wrong')
        negative_bio += 1
    elif image_type == 'negative' and symplast_score >= threshold:
        print('Classified wrong')
        negative_sym += 1
        '''    
        # determine iteration number
        if 'SET 1' in file_name:
            iteration = 1
        elif 'SET 2' in file_name:
            iteration = 2
        elif 'SET 3' in file_name:
            iteration = 3
        elif 'SET 4' in file_name:
            iteration = 4
        '''
        
        
    excel_counter += 1
        
    # write results to Excel spreadsheet
    results.write(excel_counter, 0, test_date) 
    results.write(excel_counter, 1, model_name) 
    results.write(excel_counter, 2, iteration) 
    results.write(excel_counter, 3, file_name) 
    results.write(excel_counter, 4, image_type) 
    results.write(excel_counter, 5, biofilm_score) 
    results.write(excel_counter, 6, symplast_score)
    results.write(excel_counter, 7, Formula('IF(F{}>=J2;"BIO";IF(G{}>=J2;"SYM";"none"))'.format(excel_counter+1,excel_counter+1)))    
    results.write(excel_counter, 11, Formula('IF(H{}="BIO";IF(E{}="biofilm";1;0);0)'.format(excel_counter+1,excel_counter+1))) 
    results.write(excel_counter, 12, Formula('IF(H{}="SYM";IF(E{}="biofilm";1;0);0)'.format(excel_counter+1,excel_counter+1))) 
    results.write(excel_counter, 13, Formula('IF(H{}="none";IF(E{}="biofilm";1;0);0)'.format(excel_counter+1,excel_counter+1))) 
    results.write(excel_counter, 15, Formula('IF(H{}="BIO";IF(E{}="symplast";1;0);0)'.format(excel_counter+1,excel_counter+1)))
    results.write(excel_counter, 16, Formula('IF(H{}="SYM";IF(E{}="symplast";1;0);0)'.format(excel_counter+1,excel_counter+1)))
    results.write(excel_counter, 17, Formula('IF(H{}="none";IF(E{}="symplast";1;0);0)'.format(excel_counter+1,excel_counter+1)))
    results.write(excel_counter, 19, Formula('IF(H{}="BIO";IF(E{}="negative";1;0);0)'.format(excel_counter+1,excel_counter+1)))
    results.write(excel_counter, 20, Formula('IF(H{}="SYM";IF(E{}="negative";1;0);0)'.format(excel_counter+1,excel_counter+1)))
    results.write(excel_counter, 21, Formula('IF(H{}="none";IF(E{}="negative";1;0);0)'.format(excel_counter+1,excel_counter+1)))                                       
    
    
    # add 1 to counter
    #counter += 1
    
    print('\n')
        

# create metrics worksheet
metrics = wb.add_sheet('Metrics')

# create confusion matrix
metrics.write(0, 2, 'Confusion Matrix')
metrics.write(2, 2, 'Actual')
metrics.write(3, 2, 'BIOFILM')
metrics.write(3, 3, 'SYMPLAST')
metrics.write(3, 4, 'NEGATIVE')
metrics.write(4, 0, 'Predicted')
metrics.write(4, 1, 'BIOFILM')
metrics.write(5, 1, 'SYMPLAST')
metrics.write(6, 1, 'UNCLASSIFIED')
metrics.write(4, 2, Formula('SUM(Results!L2:L{})'.format(excel_counter+1)))
metrics.write(4, 3, Formula('SUM(Results!P2:P{})'.format(excel_counter+1)))
metrics.write(4, 4, Formula('SUM(Results!T2:T{})'.format(excel_counter+1)))
metrics.write(5, 2, Formula('SUM(Results!M2:M{})'.format(excel_counter+1)))
metrics.write(5, 3, Formula('SUM(Results!Q2:Q{})'.format(excel_counter+1)))
metrics.write(5, 4, Formula('SUM(Results!U2:U{})'.format(excel_counter+1)))
metrics.write(6, 2, Formula('SUM(Results!N2:N{})'.format(excel_counter+1)))
metrics.write(6, 3, Formula('SUM(Results!R2:R{})'.format(excel_counter+1)))
metrics.write(6, 4, Formula('SUM(Results!V2:V{})'.format(excel_counter+1)))

'''
analysis.write(4, 2, biofilm_correct)
analysis.write(5, 2, biofilm_wrong)
analysis.write(6, 2, biofilm_unclass)
analysis.write(5, 3, symplast_correct)
analysis.write(4, 3, symplast_wrong)
analysis.write(6, 3, symplast_unclass)
analysis.write(6, 4, negative_correct)
analysis.write(5, 4, negative_sym)
analysis.write(4, 4, negative_bio)
'''

# calculate precision, recall, F1, and accuracy
metrics.write(9, 2, 'Precision')
metrics.write(9, 3, 'Recall')
metrics.write(9, 4, 'F1')
metrics.write(10, 1, 'BIOFILM')
metrics.write(11, 1, 'SYMPLAST')
metrics.write(3, 6, 'Accuracy')
metrics.write(10, 2, Formula('C5/(C5+D5+E5)'))
metrics.write(10, 3, Formula('C5/(C5+C6+C7)'))
metrics.write(10, 4, Formula('2*(C11*D11)/(C11+D11)'))
metrics.write(11, 2, Formula('D6/(C6+D6+E6)'))
metrics.write(11, 3, Formula('D6/(D5+D6+D7)'))
metrics.write(11, 4, Formula('2*(C12*D12)/(C12+D12)'))
metrics.write(3, 7, Formula('(C5+D6+E7)/(C5+D5+E5+C6+D6+E6+C7+D7+E7)'))

# create analysis worksheet
analysis = wb.add_sheet('Analysis')

analysis.write(0, 1, 'Biofilm Classification results')
analysis.write(1, 0, 'Test')
analysis.write(1, 1, 'Actual positives')
analysis.write(1, 2, 'Classified positive (correctly)')
analysis.write(1, 3, 'Actual negatives')
analysis.write(1, 4, 'Classified negative (correctly)')
analysis.write(1, 7, 'Probability of correct classification')
analysis.write(1, 8, 'Probability of False Positive classification')
analysis.write(1, 9, 'Probability of False Negative classification')
analysis.write(2, 0, iteration)
analysis.write(2, 1, Formula('Metrics!C5+Metrics!C6+Metrics!C7'))
analysis.write(2, 2, Formula('Metrics!C5'))
analysis.write(2, 3, Formula('Metrics!D5+Metrics!D6+Metrics!D7+Metrics!E5+Metrics!E6+Metrics!E7'))
analysis.write(2, 4, Formula('Metrics!D6+Metrics!E6+Metrics!D7+Metrics!E7'))
analysis.write(2, 7, Formula('(C3+E3)/(B3+D3)'))
analysis.write(2, 8, Formula('(D3-E3)/D3'))
analysis.write(2, 9, Formula('(B3-C3)/B3'))
analysis.write(11, 1, 'Symplast Classification results')
analysis.write(12, 0, 'Test')
analysis.write(12, 1, 'Actual positives')
analysis.write(12, 2, 'Classified positive (correctly)')
analysis.write(12, 3, 'Actual negatives')
analysis.write(12, 4, 'Classified negative (correctly)')
analysis.write(12, 7, 'Probability of correct classification')
analysis.write(12, 8, 'Probability of False Positive classification')
analysis.write(12, 9, 'Probability of False Negative classification')
analysis.write(13, 0, iteration)
analysis.write(13, 1, Formula('Metrics!D5+Metrics!D6+Metrics!D7'))
analysis.write(13, 2, Formula('Metrics!D6'))
analysis.write(13, 3, Formula('Metrics!C5+Metrics!C6+Metrics!C7+Metrics!E5+Metrics!E6+Metrics!E7'))
analysis.write(13, 4, Formula('Metrics!C5+Metrics!E5+Metrics!C7+Metrics!E7'))
analysis.write(13, 7, Formula('(C14+E14)/(B14+D14)'))
analysis.write(13, 8, Formula('(D14-E14)/D14'))
analysis.write(13, 9, Formula('(B14-C14)/B14'))



# save spreadsheet
wb.save(notebook_results)

print('\n')
print('Biofilm correct: ',biofilm_correct) 
print('Biofilm wrong: ',biofilm_wrong)
print('Biofilm unclassified: ',biofilm_unclass)
print('Symplast correct: ',symplast_correct)
print('Symplast wrong: ',symplast_wrong)
print('Symplast unclassified: ',symplast_unclass)
print('Negative correct: ',negative_correct)
print('Negative bio: ',negative_bio)
print('Negative sym: ',negative_sym)
